services:
  postgres:
    image: postgres:14-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file: ./.env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    ports:
      - "${POSTGRES_PORT}:5432"

  airflow:
    image: apache/airflow:3.0.2-python3.11
    restart: always
    entrypoint: /opt/airflow/scripts/entrypoint.sh
    env_file: ./.env
    environment:
      - POSTGRES_HOST
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - AIRFLOW__CORE__EXECUTOR
      - AIRFLOW__CORE__LOAD_EXAMPLES
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    volumes:
      - ./pipelines/dags:/opt/airflow/dags
      - ./scripts/entrypoint.sh:/opt/airflow/scripts/entrypoint.sh
      - ./data:/opt/airflow/data
      - ./pipelines/spark_jobs:/opt/airflow/spark_jobs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  spark-master:
    image: bitnami/spark:3.5
    env_file: ./.env
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    ports:
      - "${SPARK_UI_PORT}:8080"
      - "${SPARK_MASTER_PORT}:7077"
    volumes:
      - ./:/app

  spark-worker:
    image: bitnami/spark:3.5
    env_file: ./.env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=${SPARK_MASTER_URL}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
    volumes:
      - ./:/app
    depends_on:
      - spark-master
  streamlit:
    build:
      context: .
      dockerfile: docker/streamlit.dockerfile
    working_dir: /app
    env_file: ./.env
    environment:
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - GOOGLE_API_KEY
      - STREAMLIT_SERVER_PORT
    ports:
      - "${STREAMLIT_SERVER_PORT}:8501"
    volumes:
      - ./:/app
    command: >
      streamlit run chatbot_app.py
      --server.port=8501
      --server.address=0.0.0.0
      --server.runOnSave=true
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pgdata: {}